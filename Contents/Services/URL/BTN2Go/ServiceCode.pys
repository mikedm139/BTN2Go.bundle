GAME_JSON 	= 'http://smbsolr.cdnak.neulion.com/solr/btn_sch/select?q=id:%s&wt=json'
PLAYLIST_JSON 	= 'http://smbsolr.cdnak.neulion.com/solr/btn2go/select?q=sequence:%s&fl=path_ipad,path_iphone,progType,sequence,description,level&wt=json'
LIVE_AUTH	= 'http://nbamobile.neulion.com/nbageo/dgetct?url=%s&t=%s'

RE_PART_1 = Regex('(nlds_vod/nhl/vod/.+)\.mp4')
RE_PART_2 = Regex('(./nhlmobile/vod/nhl/.+)\.mp4')

STATUS = ["Upcoming", "Live", "Final"]

AudioStreamObject.language_code = Locale.Language.English
####################################################################################################
def NormalizeURL(url):
	return url

####################################################################################################
def MetadataObjectForURL(url):
	data 		= GetJSON(url)
	awayTeam 	= data['awayTeamName']
	awayScore 	= data['awayTeamScore']
	sport		= data['sportId']
	homeTeam 	= data['homeTeamName']
	homeScore 	= data['awayTeamScore']
	gameTime	= Datetime.ParseDate(data['gameTime'])
	gameStatus	= int(data['status'])
	if gameStatus == 2:
		endTime = Datetime.ParseDate(data['gameEndTime'])
		delta = endTime - gameTime
		duration = int(delta.total_seconds() * 1000)
	else:
		duration = None
	if Prefs['score_summary']:
		summary = "%s - %s %s" % (awayScore, homeScore, STATUS[gameStatus])
	else:
		summary = "%s" % STATUS[gameStatus]
	return VideoClipObject(
		title 			= "%s vs. %s %s" % (awayTeam, homeTeam, sport),
		summary			= summary,
		originally_available_at	= gameTime.date(),
		duration 		= duration,
		thumb			= R('icon-default.png')
	)

####################################################################################################
def MediaObjectsForURL(url):
	return [
		MediaObject(
			parts=[PartObject(key=HTTPLiveStreamURL(Callback(PlayHLS, url=url)))],
			video_resolution = 720
		)
	]

####################################################################################################
@indirect
def PlayHLS(url):
	data = GetJSON(url)
	program_id = data['programId']
	status = int(data['status'])
	if status == 0:
		raise Ex.LiveMediaNotStarted
	elif status == 1:
		game = JSON.ObjectFromURL(PLAYLIST_JSON % program_id)
		m3u8_url = game['response']['docs'][0]['path_ipad']
		time = int(float(Datetime.TimestampFromDatetime(Datetime.Now())))
		auth_url = LIVE_AUTH % (m3u8_url, time)
		auth_hash = Hash.MD5(auth_url)
		auth_url = '%s&h=%s' % (auth_url, auth_hash)
		auth = HTTP.Request(auth_url).content
		authed_m3u8 = "%s&%s" % (m3u8_url, auth)
		if Client.Platform == "Plex Home Theater":
			request = HTTP.Request(authed_m3u8, headers={'User-Agent':'AppleCoreMedia/1.0.0.9A334 (iPhone Simulator; U; CPU OS 5_0 like Mac OS X; en_us)'})
			headers = request.headers
			cookies = headers['set-cookie']
			return IndirectResponse(VideoClipObject, key=authed_m3u8,
				http_headers={'User-Agent':'AppleCoreMedia/1.0.0.9A334 (iPhone Simulator; U; CPU OS 5_0 like Mac OS X; en_us)'},
				http_cookies=cookies)
		else:
			return IndirectResponse(VideoClipObject, key=authed_m3u8)
		
	elif status == 2:
		game = JSON.ObjectFromURL(PLAYLIST_JSON % program_id)
		m3u8_url = game['response']['docs'][0]['path_ipad']
		return IndirectResponse(VideoClipObject, key=m3u8_url)

####################################################################################################
def GetJSON(url):
	gid = url.split('=')[-1]
	json = JSON.ObjectFromURL(GAME_JSON % gid)
	return json['response']['docs'][0]

####################################################################################################
def TestURLs():

	test_urls = []
	return test_urls